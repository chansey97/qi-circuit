#lang racket

(require qi)
(require qi/probe)
(require "../qi-circuit-lib/circuit.rkt")
(require "basic-streams.rkt")

;; Rutten Theorem 4.25.

;; a) Let C be any finite stream circuit, possibly containing feedback loops
;; (that always pass through at least one register). The stream function f : R^ω→ R^ω
;; implemented by C is always of the form:
;; f(σ) = ρ × σ
;; for all σ ∈ R^ω and for some fixed rational stream
;; ρ = (r0 + r1 X + r2 X^2 + ... rn X^n) / (s0 + s1 X +  s2 X^2 + ... + sm X^m)
;; with n, m >= 0, r0,...,rn, s0,...,sm ∈ R, and s0 ≠ 0.

;; (b) Let f : R^ω→ R^ω be a stream function of the form, for all σ ∈ R^ω:
;; f(σ) = ρ × σ
;; for some fixed rational stream ρ. Then there exists a finite stream circuit C that implements f.

;; Corollary 4.26.

;; A stream ρ ∈ R^ω is rational if and only if it is generated by a (finite)
;; stream circuit.


;; Fibonacci

;; The generating function is X / (1 - X - X^2), so r0=0, r1=1, s0=1, s1=-1, s2=-1

(define-flow sf
  (~>> (c-loop (~>> (== _ (c-reg 0))
                    (c-add +)
                    (c-loop (~>> (== _ (c-reg 0)) (c-add +) (-< _ _)))
                    (c-reg 0)
                    (-< _ _)))))

;; τ = (X / (1 - X - X^2)) σ, where σ=1
(define fib ((☯ sf) one)) 
(probe (~>> (fib) (stream-take _ 20) stream->list))
;; '(0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181)
